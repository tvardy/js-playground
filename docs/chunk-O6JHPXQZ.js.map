{
  "version": 3,
  "sources": ["../node_modules/uparser/esm/index.js", "../node_modules/uwire/esm/index.js", "../node_modules/udomdiff/esm/index.js", "../node_modules/uhandlers/esm/index.js", "../node_modules/uhtml/esm/handlers.js", "../node_modules/@ungap/create-content/esm/index.js", "../node_modules/uhtml/esm/node.js", "../node_modules/uhtml/esm/rabbit.js", "../node_modules/uhtml/esm/index.js"],
  "sourcesContent": ["const attr = /([^\\s\\\\>\"'=]+)\\s*=\\s*(['\"]?)$/;\nconst empty = /^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i;\nconst node = /<[a-z][^>]+$/i;\nconst notNode = />[^<>]*$/;\nconst selfClosing = /<([a-z]+[a-z0-9:._-]*)([^>]*?)(\\/>)/ig;\nconst trimEnd = /\\s+$/;\n\nconst isNode = (template, i) => (\n    0 < i-- && (\n    node.test(template[i]) || (\n      !notNode.test(template[i]) && isNode(template, i)\n    )\n  )\n);\n\nconst regular = (original, name, extra) => empty.test(name) ?\n                  original : `<${name}${extra.replace(trimEnd,'')}></${name}>`;\n\nexport default (template, prefix, svg) => {\n  const text = [];\n  const {length} = template;\n  for (let i = 1; i < length; i++) {\n    const chunk = template[i - 1];\n    text.push(attr.test(chunk) && isNode(template, i) ?\n      chunk.replace(\n        attr,\n        (_, $1, $2) => `${prefix}${i - 1}=${$2 || '\"'}${$1}${$2 ? '' : '\"'}`\n      ) :\n      `${chunk}<!--${prefix}${i - 1}-->`\n    );\n  }\n  text.push(template[length - 1]);\n  const output = text.join('').trim();\n  return svg ? output : output.replace(selfClosing, regular);\n};\n", "import {slice} from 'uarray';\n\nconst ELEMENT_NODE = 1;\nconst nodeType = 111;\n\nconst remove = ({firstChild, lastChild}) => {\n  const range = document.createRange();\n  range.setStartAfter(firstChild);\n  range.setEndAfter(lastChild);\n  range.deleteContents();\n  return firstChild;\n};\n\nexport const diffable = (node, operation) => node.nodeType === nodeType ?\n  ((1 / operation) < 0 ?\n    (operation ? remove(node) : node.lastChild) :\n    (operation ? node.valueOf() : node.firstChild)) :\n  node\n;\n\nexport const persistent = fragment => {\n  const {childNodes} = fragment;\n  const {length} = childNodes;\n  if (length < 2)\n    return length ? childNodes[0] : fragment;\n  const nodes = slice.call(childNodes, 0);\n  const firstChild = nodes[0];\n  const lastChild = nodes[length - 1];\n  return {\n    ELEMENT_NODE,\n    nodeType,\n    firstChild,\n    lastChild,\n    valueOf() {\n      if (childNodes.length !== length) {\n        let i = 0;\n        while (i < length)\n          fragment.appendChild(nodes[i++]);\n      }\n      return fragment;\n    }\n  };\n};\n", "/**\n * ISC License\n *\n * Copyright (c) 2020, Andrea Giammarchi, @WebReflection\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * @param {Node} parentNode The container where children live\n * @param {Node[]} a The list of current/live children\n * @param {Node[]} b The list of future children\n * @param {(entry: Node, action: number) => Node} get\n * The callback invoked per each entry related DOM operation.\n * @param {Node} [before] The optional node used as anchor to insert before.\n * @returns {Node[]} The same list of future children.\n */\nexport default (parentNode, a, b, get, before) => {\n  const bLength = b.length;\n  let aEnd = a.length;\n  let bEnd = bLength;\n  let aStart = 0;\n  let bStart = 0;\n  let map = null;\n  while (aStart < aEnd || bStart < bEnd) {\n    // append head, tail, or nodes in between: fast path\n    if (aEnd === aStart) {\n      // we could be in a situation where the rest of nodes that\n      // need to be added are not at the end, and in such case\n      // the node to `insertBefore`, if the index is more than 0\n      // must be retrieved, otherwise it's gonna be the first item.\n      const node = bEnd < bLength ?\n        (bStart ?\n          (get(b[bStart - 1], -0).nextSibling) :\n          get(b[bEnd - bStart], 0)) :\n        before;\n      while (bStart < bEnd)\n        parentNode.insertBefore(get(b[bStart++], 1), node);\n    }\n    // remove head or tail: fast path\n    else if (bEnd === bStart) {\n      while (aStart < aEnd) {\n        // remove the node only if it's unknown or not live\n        if (!map || !map.has(a[aStart]))\n          parentNode.removeChild(get(a[aStart], -1));\n        aStart++;\n      }\n    }\n    // same node: fast path\n    else if (a[aStart] === b[bStart]) {\n      aStart++;\n      bStart++;\n    }\n    // same tail: fast path\n    else if (a[aEnd - 1] === b[bEnd - 1]) {\n      aEnd--;\n      bEnd--;\n    }\n    // The once here single last swap \"fast path\" has been removed in v1.1.0\n    // https://github.com/WebReflection/udomdiff/blob/single-final-swap/esm/index.js#L69-L85\n    // reverse swap: also fast path\n    else if (\n      a[aStart] === b[bEnd - 1] &&\n      b[bStart] === a[aEnd - 1]\n    ) {\n      // this is a \"shrink\" operation that could happen in these cases:\n      // [1, 2, 3, 4, 5]\n      // [1, 4, 3, 2, 5]\n      // or asymmetric too\n      // [1, 2, 3, 4, 5]\n      // [1, 2, 3, 5, 6, 4]\n      const node = get(a[--aEnd], -1).nextSibling;\n      parentNode.insertBefore(\n        get(b[bStart++], 1),\n        get(a[aStart++], -1).nextSibling\n      );\n      parentNode.insertBefore(get(b[--bEnd], 1), node);\n      // mark the future index as identical (yeah, it's dirty, but cheap \uD83D\uDC4D)\n      // The main reason to do this, is that when a[aEnd] will be reached,\n      // the loop will likely be on the fast path, as identical to b[bEnd].\n      // In the best case scenario, the next loop will skip the tail,\n      // but in the worst one, this node will be considered as already\n      // processed, bailing out pretty quickly from the map index check\n      a[aEnd] = b[bEnd];\n    }\n    // map based fallback, \"slow\" path\n    else {\n      // the map requires an O(bEnd - bStart) operation once\n      // to store all future nodes indexes for later purposes.\n      // In the worst case scenario, this is a full O(N) cost,\n      // and such scenario happens at least when all nodes are different,\n      // but also if both first and last items of the lists are different\n      if (!map) {\n        map = new Map;\n        let i = bStart;\n        while (i < bEnd)\n          map.set(b[i], i++);\n      }\n      // if it's a future node, hence it needs some handling\n      if (map.has(a[aStart])) {\n        // grab the index of such node, 'cause it might have been processed\n        const index = map.get(a[aStart]);\n        // if it's not already processed, look on demand for the next LCS\n        if (bStart < index && index < bEnd) {\n          let i = aStart;\n          // counts the amount of nodes that are the same in the future\n          let sequence = 1;\n          while (++i < aEnd && i < bEnd && map.get(a[i]) === (index + sequence))\n            sequence++;\n          // effort decision here: if the sequence is longer than replaces\n          // needed to reach such sequence, which would brings again this loop\n          // to the fast path, prepend the difference before a sequence,\n          // and move only the future list index forward, so that aStart\n          // and bStart will be aligned again, hence on the fast path.\n          // An example considering aStart and bStart are both 0:\n          // a: [1, 2, 3, 4]\n          // b: [7, 1, 2, 3, 6]\n          // this would place 7 before 1 and, from that time on, 1, 2, and 3\n          // will be processed at zero cost\n          if (sequence > (index - bStart)) {\n            const node = get(a[aStart], 0);\n            while (bStart < index)\n              parentNode.insertBefore(get(b[bStart++], 1), node);\n          }\n          // if the effort wasn't good enough, fallback to a replace,\n          // moving both source and target indexes forward, hoping that some\n          // similar node will be found later on, to go back to the fast path\n          else {\n            parentNode.replaceChild(\n              get(b[bStart++], 1),\n              get(a[aStart++], -1)\n            );\n          }\n        }\n        // otherwise move the source forward, 'cause there's nothing to do\n        else\n          aStart++;\n      }\n      // this node has no meaning in the future list, so it's more than safe\n      // to remove it, and check the next live node out instead, meaning\n      // that only the live list index should be forwarded\n      else\n        parentNode.removeChild(get(a[aStart++], -1));\n    }\n  }\n  return b;\n};\n", "import {isArray} from 'uarray';\n\nexport const aria = node => values => {\n  for (const key in values) {\n    const name = key === 'role' ? key : `aria-${key}`;\n    const value = values[key];\n    if (value == null)\n      node.removeAttribute(name);\n    else\n      node.setAttribute(name, value);\n  }\n};\n\nexport const attribute = (node, name) => {\n  let oldValue, orphan = true;\n  const attributeNode = document.createAttributeNS(null, name);\n  return newValue => {\n    if (oldValue !== newValue) {\n      oldValue = newValue;\n      if (oldValue == null) {\n        if (!orphan) {\n          node.removeAttributeNode(attributeNode);\n          orphan = true;\n        }\n      }\n      else {\n        attributeNode.value = newValue;\n        if (orphan) {\n          node.setAttributeNodeNS(attributeNode);\n          orphan = false;\n        }\n      }\n    }\n  };\n};\n\nexport const boolean = (node, key, oldValue) => newValue => {\n  if (oldValue !== !!newValue) {\n    // when IE won't be around anymore ...\n    // node.toggleAttribute(key, oldValue = !!newValue);\n    if ((oldValue = !!newValue))\n      node.setAttribute(key, '');\n    else\n      node.removeAttribute(key);\n  }\n};\n\nexport const data = ({dataset}) => values => {\n  for (const key in values) {\n    const value = values[key];\n    if (value == null)\n      delete dataset[key];\n    else\n      dataset[key] = value;\n  }\n};\n\nexport const event = (node, name) => {\n  let oldValue, type = name.slice(2);\n  if (!(name in node) && name.toLowerCase() in node)\n    type = type.toLowerCase();\n  return newValue => {\n    const info = isArray(newValue) ? newValue : [newValue, false];\n    if (oldValue !== info[0]) {\n      if (oldValue)\n        node.removeEventListener(type, oldValue, info[1]);\n      if (oldValue = info[0])\n        node.addEventListener(type, oldValue, info[1]);\n    }\n  };\n};\n\nexport const ref = node => {\n  let oldValue;\n  return value => {\n    if (oldValue !== value) {\n      oldValue = value;\n      if (typeof value === 'function')\n        value(node);\n      else\n        value.current = node;\n    }\n  };\n};\n\nexport const setter = (node, key) => key === 'dataset' ?\n  data(node) :\n  value => {\n    node[key] = value;\n  };\n\nexport const text = node => {\n  let oldValue;\n  return newValue => {\n    if (oldValue != newValue) {\n      oldValue = newValue;\n      node.textContent = newValue == null ? '' : newValue;\n    }\n  };\n};\n", "import {isArray, slice} from 'uarray';\nimport udomdiff from 'udomdiff';\nimport {aria, attribute, boolean, event, ref, setter, text} from 'uhandlers';\nimport {diffable} from 'uwire';\n\n// from a generic path, retrieves the exact targeted node\nconst reducePath = ({childNodes}, i) => childNodes[i];\n\n// this helper avoid code bloat around handleAnything() callback\nconst diff = (comment, oldNodes, newNodes) => udomdiff(\n  comment.parentNode,\n  // TODO: there is a possible edge case where a node has been\n  //       removed manually, or it was a keyed one, attached\n  //       to a shared reference between renders.\n  //       In this case udomdiff might fail at removing such node\n  //       as its parent won't be the expected one.\n  //       The best way to avoid this issue is to filter oldNodes\n  //       in search of those not live, or not in the current parent\n  //       anymore, but this would require both a change to uwire,\n  //       exposing a parentNode from the firstChild, as example,\n  //       but also a filter per each diff that should exclude nodes\n  //       that are not in there, penalizing performance quite a lot.\n  //       As this has been also a potential issue with domdiff,\n  //       and both lighterhtml and hyperHTML might fail with this\n  //       very specific edge case, I might as well document this possible\n  //       \"diffing shenanigan\" and call it a day.\n  oldNodes,\n  newNodes,\n  diffable,\n  comment\n);\n\n// if an interpolation represents a comment, the whole\n// diffing will be related to such comment.\n// This helper is in charge of understanding how the new\n// content for such interpolation/hole should be updated\nconst handleAnything = comment => {\n  let oldValue, text, nodes = [];\n  const anyContent = newValue => {\n    switch (typeof newValue) {\n      // primitives are handled as text content\n      case 'string':\n      case 'number':\n      case 'boolean':\n        if (oldValue !== newValue) {\n          oldValue = newValue;\n          if (!text)\n            text = document.createTextNode('');\n          text.data = newValue;\n          nodes = diff(comment, nodes, [text]);\n        }\n        break;\n      // null, and undefined are used to cleanup previous content\n      case 'object':\n      case 'undefined':\n        if (newValue == null) {\n          if (oldValue != newValue) {\n            oldValue = newValue;\n            nodes = diff(comment, nodes, []);\n          }\n          break;\n        }\n        // arrays and nodes have a special treatment\n        if (isArray(newValue)) {\n          oldValue = newValue;\n          // arrays can be used to cleanup, if empty\n          if (newValue.length === 0)\n            nodes = diff(comment, nodes, []);\n          // or diffed, if these contains nodes or \"wires\"\n          else if (typeof newValue[0] === 'object')\n            nodes = diff(comment, nodes, newValue);\n          // in all other cases the content is stringified as is\n          else\n            anyContent(String(newValue));\n          break;\n        }\n        // if the new value is a DOM node, or a wire, and it's\n        // different from the one already live, then it's diffed.\n        // if the node is a fragment, it's appended once via its childNodes\n        // There is no `else` here, meaning if the content\n        // is not expected one, nothing happens, as easy as that.\n        if (oldValue !== newValue && 'ELEMENT_NODE' in newValue) {\n          oldValue = newValue;\n          nodes = diff(\n            comment,\n            nodes,\n            newValue.nodeType === 11 ?\n              slice.call(newValue.childNodes) :\n              [newValue]\n          );\n        }\n        break;\n      case 'function':\n        anyContent(newValue(comment));\n        break;\n    }\n  };\n  return anyContent;\n};\n\n// attributes can be:\n//  * ref=${...}      for hooks and other purposes\n//  * aria=${...}     for aria attributes\n//  * ?boolean=${...} for boolean attributes\n//  * .dataset=${...} for dataset related attributes\n//  * .setter=${...}  for Custom Elements setters or nodes with setters\n//                    such as buttons, details, options, select, etc\n//  * @event=${...}   to explicitly handle event listeners\n//  * onevent=${...}  to automatically handle event listeners\n//  * generic=${...}  to handle an attribute just like an attribute\nconst handleAttribute = (node, name/*, svg*/) => {\n  switch (name[0]) {\n    case '?': return boolean(node, name.slice(1), false);\n    case '.': return setter(node, name.slice(1));\n    case '@': return event(node, 'on' + name.slice(1));\n    case 'o': if (name[1] === 'n') return event(node, name);\n  }\n\n  switch (name) {\n    case 'ref': return ref(node);\n    case 'aria': return aria(node);\n  }\n\n  return attribute(node, name/*, svg*/);\n};\n\n// each mapped update carries the update type and its path\n// the type is either node, attribute, or text, while\n// the path is how to retrieve the related node to update.\n// In the attribute case, the attribute name is also carried along.\nexport function handlers(options) {\n  const {type, path} = options;\n  const node = path.reduceRight(reducePath, this);\n  return type === 'node' ?\n    handleAnything(node) :\n    (type === 'attr' ?\n      handleAttribute(node, options.name/*, options.svg*/) :\n      text(node));\n};\n", "/*! (c) Andrea Giammarchi - ISC */\nvar createContent = (function (document) {'use strict';\n  var FRAGMENT = 'fragment';\n  var TEMPLATE = 'template';\n  var HAS_CONTENT = 'content' in create(TEMPLATE);\n\n  var createHTML = HAS_CONTENT ?\n    function (html) {\n      var template = create(TEMPLATE);\n      template.innerHTML = html;\n      return template.content;\n    } :\n    function (html) {\n      var content = create(FRAGMENT);\n      var template = create(TEMPLATE);\n      var childNodes = null;\n      if (/^[^\\S]*?<(col(?:group)?|t(?:head|body|foot|r|d|h))/i.test(html)) {\n        var selector = RegExp.$1;\n        template.innerHTML = '<table>' + html + '</table>';\n        childNodes = template.querySelectorAll(selector);\n      } else {\n        template.innerHTML = html;\n        childNodes = template.childNodes;\n      }\n      append(content, childNodes);\n      return content;\n    };\n\n  return function createContent(markup, type) {\n    return (type === 'svg' ? createSVG : createHTML)(markup);\n  };\n\n  function append(root, childNodes) {\n    var length = childNodes.length;\n    while (length--)\n      root.appendChild(childNodes[0]);\n  }\n\n  function create(element) {\n    return element === FRAGMENT ?\n      document.createDocumentFragment() :\n      document.createElementNS('http://www.w3.org/1999/xhtml', element);\n  }\n\n  // it could use createElementNS when hasNode is there\n  // but this fallback is equally fast and easier to maintain\n  // it is also battle tested already in all IE\n  function createSVG(svg) {\n    var content = create(FRAGMENT);\n    var template = create('div');\n    template.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\">' + svg + '</svg>';\n    append(content, template.firstChild.childNodes);\n    return content;\n  }\n\n}(document));\nexport default createContent;\n", "import createContent from '@ungap/create-content';\n\n// this \"hack\" tells the library if the browser is IE11 or old Edge\nconst isImportNodeLengthWrong = document.importNode.length != 1;\n\n// IE11 and old Edge discard empty nodes when cloning, potentially\n// resulting in broken paths to find updates. The workaround here\n// is to import once, upfront, the fragment that will be cloned\n// later on, so that paths are retrieved from one already parsed,\n// hence without missing child nodes once re-cloned.\nexport const createFragment = isImportNodeLengthWrong ?\n  (text, type, normalize) => document.importNode(\n    createContent(text, type, normalize),\n    true\n  ) :\n  createContent;\n\n// IE11 and old Edge have a different createTreeWalker signature that\n// has been deprecated in other browsers. This export is needed only\n// to guarantee the TreeWalker doesn't show warnings and, ultimately, works\nexport const createWalker = isImportNodeLengthWrong ?\n  fragment => document.createTreeWalker(fragment, 1 | 128, null, false) :\n  fragment => document.createTreeWalker(fragment, 1 | 128);\n", "import umap from 'umap';\nimport instrument from 'uparser';\nimport {indexOf, isArray} from 'uarray';\nimport {persistent} from 'uwire';\n\nimport {handlers} from './handlers.js';\nimport {createFragment, createWalker} from './node.js';\n\n// from a fragment container, create an array of indexes\n// related to its child nodes, so that it's possible\n// to retrieve later on exact node via reducePath\nconst createPath = node => {\n  const path = [];\n  let {parentNode} = node;\n  while (parentNode) {\n    path.push(indexOf.call(parentNode.childNodes, node));\n    node = parentNode;\n    parentNode = node.parentNode;\n  }\n  return path;\n};\n\n// the prefix is used to identify either comments, attributes, or nodes\n// that contain the related unique id. In the attribute cases\n// is\u00B5X=\"attribute-name\" will be used to map current X update to that\n// attribute name, while comments will be like <!--is\u00B5X-->, to map\n// the update to that specific comment node, hence its parent.\n// style and textarea will have <!--is\u00B5X--> text content, and are handled\n// directly through text-only updates.\nconst prefix = 'is\u00B5';\n\n// Template Literals are unique per scope and static, meaning a template\n// should be parsed once, and once only, as it will always represent the same\n// content, within the exact same amount of updates each time.\n// This cache relates each template to its unique content and updates.\nconst cache = umap(new WeakMap);\n\n// a RegExp that helps checking nodes that cannot contain comments\nconst textOnly = /^(?:plaintext|script|style|textarea|title|xmp)$/i;\n\nexport const createCache = () => ({\n  stack: [],    // each template gets a stack for each interpolation \"hole\"\n\n  entry: null,  // each entry contains details, such as:\n                //  * the template that is representing\n                //  * the type of node it represents (html or svg)\n                //  * the content fragment with all nodes\n                //  * the list of updates per each node (template holes)\n                //  * the \"wired\" node or fragment that will get updates\n                // if the template or type are different from the previous one\n                // the entry gets re-created each time\n\n  wire: null    // each rendered node represent some wired content and\n                // this reference to the latest one. If different, the node\n                // will be cleaned up and the new \"wire\" will be appended\n});\n\n// the entry stored in the rendered node cache, and per each \"hole\"\nconst createEntry = (type, template) => {\n  const {content, updates} = mapUpdates(type, template);\n  return {type, template, content, updates, wire: null};\n};\n\n// a template is instrumented to be able to retrieve where updates are needed.\n// Each unique template becomes a fragment, cloned once per each other\n// operation based on the same template, i.e. data => html`<p>${data}</p>`\nconst mapTemplate = (type, template) => {\n  const text = instrument(template, prefix, type === 'svg');\n  const content = createFragment(text, type);\n  // once instrumented and reproduced as fragment, it's crawled\n  // to find out where each update is in the fragment tree\n  const tw = createWalker(content);\n  const nodes = [];\n  const length = template.length - 1;\n  let i = 0;\n  // updates are searched via unique names, linearly increased across the tree\n  // <div is\u00B50=\"attr\" is\u00B51=\"other\"><!--is\u00B52--><style><!--is\u00B53--</style></div>\n  let search = `${prefix}${i}`;\n  while (i < length) {\n    const node = tw.nextNode();\n    // if not all updates are bound but there's nothing else to crawl\n    // it means that there is something wrong with the template.\n    if (!node)\n      throw `bad template: ${text}`;\n    // if the current node is a comment, and it contains is\u00B5X\n    // it means the update should take care of any content\n    if (node.nodeType === 8) {\n      // The only comments to be considered are those\n      // which content is exactly the same as the searched one.\n      if (node.data === search) {\n        nodes.push({type: 'node', path: createPath(node)});\n        search = `${prefix}${++i}`;\n      }\n    }\n    else {\n      // if the node is not a comment, loop through all its attributes\n      // named is\u00B5X and relate attribute updates to this node and the\n      // attribute name, retrieved through node.getAttribute(\"is\u00B5X\")\n      // the is\u00B5X attribute will be removed as irrelevant for the layout\n      // let svg = -1;\n      while (node.hasAttribute(search)) {\n        nodes.push({\n          type: 'attr',\n          path: createPath(node),\n          name: node.getAttribute(search),\n          //svg: svg < 0 ? (svg = ('ownerSVGElement' in node ? 1 : 0)) : svg\n        });\n        node.removeAttribute(search);\n        search = `${prefix}${++i}`;\n      }\n      // if the node was a style, textarea, or others, check its content\n      // and if it is <!--is\u00B5X--> then update tex-only this node\n      if (\n        textOnly.test(node.tagName) &&\n        node.textContent.trim() === `<!--${search}-->`\n      ){\n        node.textContent = '';\n        nodes.push({type: 'text', path: createPath(node)});\n        search = `${prefix}${++i}`;\n      }\n    }\n  }\n  // once all nodes to update, or their attributes, are known, the content\n  // will be cloned in the future to represent the template, and all updates\n  // related to such content retrieved right away without needing to re-crawl\n  // the exact same template, and its content, more than once.\n  return {content, nodes};\n};\n\n// if a template is unknown, perform the previous mapping, otherwise grab\n// its details such as the fragment with all nodes, and updates info.\nconst mapUpdates = (type, template) => {\n  const {content, nodes} = (\n    cache.get(template) ||\n    cache.set(template, mapTemplate(type, template))\n  );\n  // clone deeply the fragment\n  const fragment = document.importNode(content, true);\n  // and relate an update handler per each node that needs one\n  const updates = nodes.map(handlers, fragment);\n  // return the fragment and all updates to use within its nodes\n  return {content: fragment, updates};\n};\n\n// as html and svg can be nested calls, but no parent node is known\n// until rendered somewhere, the unroll operation is needed to\n// discover what to do with each interpolation, which will result\n// into an update operation.\nexport const unroll = (info, {type, template, values}) => {\n  const {length} = values;\n  // interpolations can contain holes and arrays, so these need\n  // to be recursively discovered\n  unrollValues(info, values, length);\n  let {entry} = info;\n  // if the cache entry is either null or different from the template\n  // and the type this unroll should resolve, create a new entry\n  // assigning a new content fragment and the list of updates.\n  if (!entry || (entry.template !== template || entry.type !== type))\n    info.entry = (entry = createEntry(type, template));\n  const {content, updates, wire} = entry;\n  // even if the fragment and its nodes is not live yet,\n  // it is already possible to update via interpolations values.\n  for (let i = 0; i < length; i++)\n    updates[i](values[i]);\n  // if the entry was new, or representing a different template or type,\n  // create a new persistent entity to use during diffing.\n  // This is simply a DOM node, when the template has a single container,\n  // as in `<p></p>`, or a \"wire\" in `<p></p><p></p>` and similar cases.\n  return wire || (entry.wire = persistent(content));\n};\n\n// the stack retains, per each interpolation value, the cache\n// related to each interpolation value, or null, if the render\n// was conditional and the value is not special (Array or Hole)\nconst unrollValues = ({stack}, values, length) => {\n  for (let i = 0; i < length; i++) {\n    const hole = values[i];\n    // each Hole gets unrolled and re-assigned as value\n    // so that domdiff will deal with a node/wire, not with a hole\n    if (hole instanceof Hole)\n      values[i] = unroll(\n        stack[i] || (stack[i] = createCache()),\n        hole\n      );\n    // arrays are recursively resolved so that each entry will contain\n    // also a DOM node or a wire, hence it can be diffed if/when needed\n    else if (isArray(hole))\n      unrollValues(\n        stack[i] || (stack[i] = createCache()),\n        hole,\n        hole.length\n      );\n    // if the value is nothing special, the stack doesn't need to retain data\n    // this is useful also to cleanup previously retained data, if the value\n    // was a Hole, or an Array, but not anymore, i.e.:\n    // const update = content => html`<div>${content}</div>`;\n    // update(listOfItems); update(null); update(html`hole`)\n    else\n      stack[i] = null;\n  }\n  if (length < stack.length)\n    stack.splice(length);\n};\n\n/**\n * Holds all details wrappers needed to render the content further on.\n * @constructor\n * @param {string} type The hole type, either `html` or `svg`.\n * @param {string[]} template The template literals used to the define the content.\n * @param {Array} values Zero, one, or more interpolated values to render.\n */\nexport function Hole(type, template, values) {\n  this.type = type;\n  this.template = template;\n  this.values = values;\n};\n", "import umap from 'umap';\nimport {Hole, createCache, unroll} from './rabbit.js';\n\nconst {create, defineProperties} = Object;\n\n// both `html` and `svg` template literal tags are polluted\n// with a `for(ref[, id])` and a `node` tag too\nconst tag = type => {\n  // both `html` and `svg` tags have their own cache\n  const keyed = umap(new WeakMap);\n  // keyed operations always re-use the same cache and unroll\n  // the template and its interpolations right away\n  const fixed = cache => (template, ...values) => unroll(\n    cache,\n    {type, template, values}\n  );\n  return defineProperties(\n    // non keyed operations are recognized as instance of Hole\n    // during the \"unroll\", recursively resolved and updated\n    (template, ...values) => new Hole(type, template, values),\n    {\n      for: {\n        // keyed operations need a reference object, usually the parent node\n        // which is showing keyed results, and optionally a unique id per each\n        // related node, handy with JSON results and mutable list of objects\n        // that usually carry a unique identifier\n        value(ref, id) {\n          const memo = keyed.get(ref) || keyed.set(ref, create(null));\n          return memo[id] || (memo[id] = fixed(createCache()));\n        }\n      },\n      node: {\n        // it is possible to create one-off content out of the box via node tag\n        // this might return the single created node, or a fragment with all\n        // nodes present at the root level and, of course, their child nodes\n        value: (template, ...values) => unroll(\n          createCache(),\n          {type, template, values}\n        ).valueOf()\n      }\n    }\n  );\n};\n\n// each rendered node gets its own cache\nconst cache = umap(new WeakMap);\n\n// rendering means understanding what `html` or `svg` tags returned\n// and it relates a specific node to its own unique cache.\n// Each time the content to render changes, the node is cleaned up\n// and the new new content is appended, and if such content is a Hole\n// then it's \"unrolled\" to resolve all its inner nodes.\nconst render = (where, what) => {\n  const hole = typeof what === 'function' ? what() : what;\n  const info = cache.get(where) || cache.set(where, createCache());\n  const wire = hole instanceof Hole ? unroll(info, hole) : hole;\n  if (wire !== info.wire) {\n    info.wire = wire;\n    where.textContent = '';\n    // valueOf() simply returns the node itself, but in case it was a \"wire\"\n    // it will eventually re-append all nodes to its fragment so that such\n    // fragment can be re-appended many times in a meaningful way\n    // (wires are basically persistent fragments facades with special behavior)\n    where.appendChild(wire.valueOf());\n  }\n  return where;\n};\n\nconst html = tag('html');\nconst svg = tag('svg');\n\nexport {Hole, render, html, svg};\n"],
  "mappings": "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",
  "names": []
}
