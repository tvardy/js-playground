{
  "version": 3,
  "sources": ["../src/js/store.js", "../node_modules/svelte/store/index.mjs", "../src/js/state-stores.js"],
  "sourcesContent": ["import { writable } from 'svelte/store'\nimport { nanoid as uuid } from 'nanoid'\n\nimport initialState from './store-initial-state'\nimport { _noop } from './utils/noop'\n\nconst _state = {\n  ...initialState\n}\n\nfunction createStore () {\n  const { subscribe, update } = writable(_state)\n\n  return {\n    subscribe,\n\n    // actions\n    toggle (id) {\n      update((state) => ({\n        ...state,\n        todos: state.todos.map((item) => {\n          if (item.id === id) {\n            item.done = !item.done\n          }\n          return item\n        })\n      }))\n    },\n    add (text) {\n      update((state) => ({\n        ...state,\n        todos: [{ text, done: false, id: uuid() }, ...state.todos]\n      }))\n    }\n  }\n}\n\nexport const store = createStore()\n\nexport function connect (mapState = _noop, mapActions = _noop) {\n  mapActions(store)\n\n  store.subscribe(mapState)\n}\n", "import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n", "import { init } from './state-common.js'\nimport * as store from './store.js'\nimport SvelteApp from './components/App.svelte'\n\ninit('Svelte stores', store, SvelteApp)\n"],
  "mappings": "kQAAA,0CCGA,GAAM,GAAmB,GAgBzB,WAAkB,EAAO,EAAQ,EAAM,CACnC,GAAI,GACE,EAAc,GACpB,WAAa,EAAW,CACpB,GAAI,EAAe,EAAO,IACtB,GAAQ,EACJ,GAAM,CACN,GAAM,GAAY,CAAC,EAAiB,OACpC,OAAS,GAAI,EAAG,EAAI,EAAY,OAAQ,GAAK,EAAG,CAC5C,GAAM,GAAI,EAAY,GACtB,EAAE,KACF,EAAiB,KAAK,EAAG,GAE7B,GAAI,EAAW,CACX,OAAS,GAAI,EAAG,EAAI,EAAiB,OAAQ,GAAK,EAC9C,EAAiB,GAAG,GAAG,EAAiB,EAAI,IAEhD,EAAiB,OAAS,IAK1C,WAAgB,EAAI,CAChB,EAAI,EAAG,IAEX,WAAmB,EAAK,EAAa,EAAM,CACvC,GAAM,GAAa,CAAC,EAAK,GACzB,SAAY,KAAK,GACb,EAAY,SAAW,GACvB,GAAO,EAAM,IAAQ,GAEzB,EAAI,GACG,IAAM,CACT,GAAM,GAAQ,EAAY,QAAQ,GAClC,AAAI,IAAU,IACV,EAAY,OAAO,EAAO,GAE1B,EAAY,SAAW,GACvB,KACA,EAAO,OAInB,MAAO,CAAE,MAAK,SAAQ,aDxD1B,GAAM,GAAS,KACV,GAGL,YAAwB,CACtB,GAAM,CAAE,YAAW,UAAW,EAAS,GAEvC,MAAO,CACL,YAGA,OAAQ,EAAI,CACV,EAAO,AAAC,GAAW,OACd,GADc,CAEjB,MAAO,EAAM,MAAM,IAAI,AAAC,GAClB,GAAK,KAAO,GACd,GAAK,KAAO,CAAC,EAAK,MAEb,QAIb,IAAK,EAAM,CACT,EAAO,AAAC,GAAW,OACd,GADc,CAEjB,MAAO,CAAC,CAAE,OAAM,KAAM,GAAO,GAAI,KAAU,GAAG,EAAM,YAMrD,GAAM,GAAQ,IAEd,WAAkB,EAAW,EAAO,EAAa,EAAO,CAC7D,EAAW,GAEX,EAAM,UAAU,GEtClB,EAAK,gBAAiB,EAAO",
  "names": []
}
