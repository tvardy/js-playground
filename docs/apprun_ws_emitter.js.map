{
  "version": 3,
  "sources": ["../src/js/apprun_ws_emitter.jsx"],
  "sourcesContent": ["/* global app, io */\nimport { LEVELS, Log } from './tools/Logger.js'\nimport { randomRange } from './utils/random.js'\nimport { wsConnect } from './utils/wsConnect.js'\n\nimport { constants } from './apprun_ws_common.js'\n\nif (process.env.NODE_ENV === 'development') {\n  Log.logLevel = LEVELS.DEBUG\n}\n\nLog.debug('AppRun Client script started!')\n\nconst view = ({ status, sending }) => (\n  <>\n    <h1>Emitter Works!</h1>\n    <h2>Status: {status}</h2>\n    <button onclick=\"app.run('toggle')\">{sending ? 'Pause' : 'Play'}</button>\n    <p>See browser console if you want to trace the data being sent</p>\n  </>\n)\n\nconst update = {\n  async init (state) {\n    try {\n      App.ws = await wsConnect(constants.URL)\n\n      Log.debug('WS connected')\n\n      App.run('wait')\n\n      return {\n        ...state,\n        status: 'connected'\n      }\n    } catch (e) {\n      Log.error('WS error:', e)\n\n      return {\n        ...state,\n        status: 'error'\n      }\n    }\n  },\n  wait (state) {\n    if (state.sending) {\n      const time = randomRange(constants.NUMBERS.time.min, constants.NUMBERS.time.max)\n\n      setTimeout(() => App.run('sendValue'), time)\n    }\n\n    return state\n  },\n  sendValue (state) {\n    const value = randomRange(\n      constants.NUMBERS.values.min,\n      constants.NUMBERS.values.max\n    )\n\n    Log.info('new value:', value)\n\n    App.ws.emit('data', value)\n\n    App.run('wait')\n\n    return state\n  },\n  toggle (state) {\n    const newState = {\n      ...state,\n      sending: !state.sending\n    }\n\n    if (newState.sending) {\n      setTimeout(() => App.run('wait'), 0)\n    }\n\n    return newState\n  }\n}\n\nconst App = app.start(\n  constants.APP_ROOT,\n  { status: 'connecting', sending: true },\n  view,\n  update\n)\n\nApp.run('init')\n"],
  "mappings": "gKAWAA,EAAI,MAAM,+BAA+B,EAEzC,IAAMC,EAAO,CAAC,CAAE,OAAAC,EAAQ,QAAAC,CAAQ,IAC9B,wBACE,MAAC,UAAG,gBAAc,EAClB,MAAC,UAAG,WAASD,CAAO,EACpB,MAAC,UAAO,QAAQ,qBAAqBC,EAAU,QAAU,MAAO,EAChE,MAAC,SAAE,8DAA4D,CACjE,EAGIC,EAAS,CACb,MAAM,KAAMC,EAAO,CACjB,GAAI,CACF,OAAAC,EAAI,GAAK,MAAMC,EAAUC,EAAU,GAAG,EAEtCR,EAAI,MAAM,cAAc,EAExBM,EAAI,IAAI,MAAM,EAEP,CACL,GAAGD,EACH,OAAQ,WACV,CACF,OAAS,EAAP,CACA,OAAAL,EAAI,MAAM,YAAa,CAAC,EAEjB,CACL,GAAGK,EACH,OAAQ,OACV,CACF,CACF,EACA,KAAMA,EAAO,CACX,GAAIA,EAAM,QAAS,CACjB,IAAMI,EAAOC,EAAYF,EAAU,QAAQ,KAAK,IAAKA,EAAU,QAAQ,KAAK,GAAG,EAE/E,WAAW,IAAMF,EAAI,IAAI,WAAW,EAAGG,CAAI,CAC7C,CAEA,OAAOJ,CACT,EACA,UAAWA,EAAO,CAChB,IAAMM,EAAQD,EACZF,EAAU,QAAQ,OAAO,IACzBA,EAAU,QAAQ,OAAO,GAC3B,EAEA,OAAAR,EAAI,KAAK,aAAcW,CAAK,EAE5BL,EAAI,GAAG,KAAK,OAAQK,CAAK,EAEzBL,EAAI,IAAI,MAAM,EAEPD,CACT,EACA,OAAQA,EAAO,CACb,IAAMO,EAAW,CACf,GAAGP,EACH,QAAS,CAACA,EAAM,OAClB,EAEA,OAAIO,EAAS,SACX,WAAW,IAAMN,EAAI,IAAI,MAAM,EAAG,CAAC,EAG9BM,CACT,CACF,EAEMN,EAAM,IAAI,MACdE,EAAU,SACV,CAAE,OAAQ,aAAc,QAAS,EAAK,EACtCP,EACAG,CACF,EAEAE,EAAI,IAAI,MAAM",
  "names": ["Log", "view", "status", "sending", "update", "state", "App", "wsConnect", "constants", "time", "randomRange", "value", "newState"]
}
